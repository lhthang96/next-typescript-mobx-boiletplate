{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nvar _jsxFileName = \"C:\\\\Users\\\\thangluong\\\\Desktop\\\\mypc\\\\Projects\\\\Personal\\\\next-typescript\\\\pages\\\\movies\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport _ from 'lodash';\nimport * as moviesApi from '../../common/http/movies';\nimport LandingLayout from '../../containers/LandingLayout';\nconst {\n  Meta\n} = _Card;\nconst DefaultImageUrl = \"https://ci5.googleusercontent.com/proxy/kHgL543wKoBsxAOA1xAefBIZzsk0W2mq9Jz--x1UG8cY_dHuSOHQjxVRydCtQClUyUTAjxttjvmke9EuRsNuRpJ26n0dgrQDh1q8endwztBq0ZjHvxiHApoVlPafogrIV_3c78OSjt5kT4VcKtfRv0NCmMTEGw=s0-d-e1-ft#https://mcusercontent.com/bfbd29faaf4c5a50d776a6c40/images/e0a8a7ac-9b70-4481-a0ab-dd55419adff4.png\";\n\nconst MoviesPage = ({\n  movies\n}) => {\n  const searchInput = useRef(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: moviesList,\n    1: setMoviesList\n  } = useState(movies);\n  const MOCK_MOVIES = {\n    id: 'mock-movies',\n    name: 'Mock movies - A movie with nonsense'\n  };\n\n  const onSearchMovies = async () => {\n    setLoading(true);\n    const movies = await moviesApi.searchMovies(searchInput.current.input.value);\n    setLoading(false);\n    setMoviesList(movies);\n  };\n\n  const renderMoviesList = () => {\n    return moviesList.length > 0 ? moviesList.map(movie => {\n      var _movie$image;\n\n      const movieSummary = _.replace(movie.summary, /<[/]?[pb]>/g, '');\n\n      return __jsx(_Col, {\n        key: movie.id,\n        span: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, __jsx(_Card, {\n        hoverable: true,\n        cover: __jsx(\"img\", {\n          alt: \"example\",\n          src: ((_movie$image = movie.image) === null || _movie$image === void 0 ? void 0 : _movie$image.medium) || DefaultImageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }),\n        style: {\n          width: 240,\n          height: 600,\n          marginBottom: 24,\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, __jsx(Meta, {\n        title: movie.name || 'No name given',\n        description: movieSummary || 'No summary info',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })));\n    }) : __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"No Movies found\");\n  };\n\n  const renderMoviesListContent = () => {\n    return loading ? __jsx(_Col, {\n      span: 24,\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '24px 0 36px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(_Spin, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })) : renderMoviesList();\n  };\n\n  return __jsx(LandingLayout, {\n    path: \"home/movies\",\n    title: \"Movies\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Movies page\"), __jsx(_Input, {\n    ref: searchInput,\n    required: true,\n    placeholder: \"Input movie name and press 'Enter' to search ...\",\n    onPressEnter: onSearchMovies,\n    style: {\n      marginBottom: '24px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(_Row, {\n    className: \"movies-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderMoviesListContent()));\n};\n\nMoviesPage.getInitialProps = async () => {\n  const initMovies = await moviesApi.searchMovies('sherlock');\n  return {\n    movies: initMovies\n  };\n};\n\nexport default inject('moviesStore')(observer(MoviesPage));","map":{"version":3,"sources":["C:/Users/thangluong/Desktop/mypc/Projects/Personal/next-typescript/pages/movies/index.tsx"],"names":["useState","useRef","inject","observer","_","moviesApi","LandingLayout","Meta","DefaultImageUrl","MoviesPage","movies","searchInput","loading","setLoading","moviesList","setMoviesList","MOCK_MOVIES","id","name","onSearchMovies","searchMovies","current","input","value","renderMoviesList","length","map","movie","movieSummary","replace","summary","image","medium","width","height","marginBottom","overflow","renderMoviesListContent","display","justifyContent","margin","getInitialProps","initMovies"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\r\nimport { NextPage } from 'next';\r\nimport { observable } from 'mobx';\r\nimport { inject, observer } from 'mobx-react';\r\nimport _ from 'lodash';\r\n\r\nimport { MoviesStore } from '../../store';\r\nimport { MovieItem } from './types';\r\nimport * as moviesApi from '../../common/http/movies';\r\n\r\nimport { Card, Col, Input, Row, Spin } from 'antd';\r\nimport LandingLayout from '../../containers/LandingLayout';\r\n\r\nconst { Meta } = Card;\r\nconst DefaultImageUrl = \"https://ci5.googleusercontent.com/proxy/kHgL543wKoBsxAOA1xAefBIZzsk0W2mq9Jz--x1UG8cY_dHuSOHQjxVRydCtQClUyUTAjxttjvmke9EuRsNuRpJ26n0dgrQDh1q8endwztBq0ZjHvxiHApoVlPafogrIV_3c78OSjt5kT4VcKtfRv0NCmMTEGw=s0-d-e1-ft#https://mcusercontent.com/bfbd29faaf4c5a50d776a6c40/images/e0a8a7ac-9b70-4481-a0ab-dd55419adff4.png\"\r\n\r\ninterface Props {\r\n  movies: Array<MovieItem>;\r\n  moviesStore?: MoviesStore;\r\n}\r\n\r\nconst MoviesPage: NextPage<Props> = ({ movies }) => {\r\n  const searchInput = useRef(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [ moviesList, setMoviesList ] = useState(movies);\r\n\r\n  const MOCK_MOVIES: MovieItem = {\r\n    id: 'mock-movies',\r\n    name: 'Mock movies - A movie with nonsense',\r\n  }\r\n\r\n  const onSearchMovies = async () => {\r\n    setLoading(true);\r\n    const movies = await moviesApi.searchMovies(searchInput.current.input.value);\r\n    setLoading(false);\r\n    setMoviesList(movies);\r\n  }\r\n\r\n  const renderMoviesList = (): JSX.Element | Array<JSX.Element> => {\r\n    return moviesList.length > 0\r\n      ? moviesList.map(movie => {\r\n        const movieSummary = _.replace(movie.summary, /<[/]?[pb]>/g, '');\r\n        return (\r\n          <Col key={movie.id} span={8} >\r\n          <Card\r\n            hoverable\r\n            cover={<img alt=\"example\" src={movie.image?.medium || DefaultImageUrl } />}\r\n            style={{\r\n              width: 240,\r\n              height: 600,\r\n              marginBottom: 24,\r\n              overflow: 'hidden',\r\n            }}\r\n          >\r\n            <Meta title={movie.name || 'No name given'} description={movieSummary || 'No summary info'} />\r\n          </Card>\r\n          </Col>\r\n        )\r\n      })  \r\n      : <p>No Movies found</p>\r\n  }\r\n\r\n  const renderMoviesListContent = (): JSX.Element | Array<JSX.Element> => {\r\n    return loading\r\n      ? (\r\n        <Col\r\n          span={24}\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            margin: '24px 0 36px',\r\n          }} >\r\n          <Spin size=\"large\" />\r\n        </Col>\r\n      )\r\n      : renderMoviesList();\r\n  }\r\n\r\n  return (\r\n    <LandingLayout path=\"home/movies\" title=\"Movies\" >\r\n      <p>Movies page</p>\r\n      <Input\r\n        ref={searchInput}\r\n        required\r\n        placeholder=\"Input movie name and press 'Enter' to search ...\"\r\n        onPressEnter={onSearchMovies}\r\n        style={{marginBottom: '24px'}} />\r\n      <Row className=\"movies-list\">\r\n        { renderMoviesListContent() }\r\n      </Row>\r\n    </LandingLayout>\r\n  )\r\n}\r\n\r\nMoviesPage.getInitialProps = async () => {\r\n  const initMovies = await moviesApi.searchMovies('sherlock');\r\n\r\n  return {\r\n    movies: initMovies,\r\n  }\r\n}\r\n\r\nexport default inject('moviesStore')(observer(MoviesPage));"]},"metadata":{},"sourceType":"module"}