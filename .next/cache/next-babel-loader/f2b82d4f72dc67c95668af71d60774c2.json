{"ast":null,"code":"import \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nvar _jsxFileName = \"C:\\\\Users\\\\thangluong\\\\Desktop\\\\mypc\\\\Projects\\\\Personal\\\\next-typescript\\\\pages\\\\movies\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport _ from 'lodash';\nimport { get } from 'lodash/fp';\nimport LandingLayout from '../../containers/LandingLayout';\nvar Meta = _Card.Meta;\nvar DefaultImageUrl = \"https://ci5.googleusercontent.com/proxy/kHgL543wKoBsxAOA1xAefBIZzsk0W2mq9Jz--x1UG8cY_dHuSOHQjxVRydCtQClUyUTAjxttjvmke9EuRsNuRpJ26n0dgrQDh1q8endwztBq0ZjHvxiHApoVlPafogrIV_3c78OSjt5kT4VcKtfRv0NCmMTEGw=s0-d-e1-ft#https://mcusercontent.com/bfbd29faaf4c5a50d776a6c40/images/e0a8a7ac-9b70-4481-a0ab-dd55419adff4.png\";\n\nvar MoviesPage = function MoviesPage(_ref) {\n  var movies = _ref.movies;\n  var searchInput = useRef(null);\n\n  var _useState = useState(movies),\n      moviesList = _useState[0],\n      setMoviesList = _useState[1];\n\n  var onSearchMovies = function onSearchMovies() {\n    var res, data;\n    return _regeneratorRuntime.async(function onSearchMovies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(searchInput.current.input.value);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://api.tvmaze.com/search/shows?q=\".concat(searchInput.current.input.value)));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 6:\n            data = _context.sent;\n            setMoviesList(data.map(function (entry) {\n              return get('show', entry);\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var renderMovies = function renderMovies() {\n    return moviesList ? moviesList.map(function (movie) {\n      var _movie$image;\n\n      var movieSummary = _.replace(movie.summary, /<[/]?[pb]>/g, '');\n\n      return __jsx(_Card, {\n        key: movie.id,\n        hoverable: true,\n        style: {\n          width: 240\n        },\n        cover: __jsx(\"img\", {\n          alt: \"example\",\n          src: ((_movie$image = movie.image) === null || _movie$image === void 0 ? void 0 : _movie$image.medium) || DefaultImageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, __jsx(Meta, {\n        title: movie.name || 'No name given',\n        description: movieSummary || 'No summary info',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    }) : __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"No Movies found\");\n  };\n\n  return __jsx(LandingLayout, {\n    path: \"home/movies\",\n    title: \"Movies\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Movies page\"), __jsx(_Input, {\n    ref: searchInput,\n    placeholder: \"Title movie name to search\",\n    onPressEnter: onSearchMovies,\n    style: {\n      marginBottom: '24px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"movies-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, renderMovies()));\n};\n\nMoviesPage.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=sherlock'));\n\n        case 2:\n          res = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            movies: data.map(function (entry) {\n              return get('show', entry);\n            })\n          });\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nexport default MoviesPage;","map":{"version":3,"sources":["C:/Users/thangluong/Desktop/mypc/Projects/Personal/next-typescript/pages/movies/index.tsx"],"names":["useState","useRef","fetch","_","get","LandingLayout","Meta","DefaultImageUrl","MoviesPage","movies","searchInput","moviesList","setMoviesList","onSearchMovies","console","log","current","input","value","res","json","data","map","entry","renderMovies","movie","movieSummary","replace","summary","id","width","image","medium","name","marginBottom","getInitialProps"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\r\nimport { NextPage } from 'next';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport _ from 'lodash';\r\nimport { get } from 'lodash/fp';\r\n\r\nimport { Card, Input } from 'antd';\r\nimport LandingLayout from '../../containers/LandingLayout';\r\n\r\nconst { Meta } = Card;\r\nconst DefaultImageUrl = \"https://ci5.googleusercontent.com/proxy/kHgL543wKoBsxAOA1xAefBIZzsk0W2mq9Jz--x1UG8cY_dHuSOHQjxVRydCtQClUyUTAjxttjvmke9EuRsNuRpJ26n0dgrQDh1q8endwztBq0ZjHvxiHApoVlPafogrIV_3c78OSjt5kT4VcKtfRv0NCmMTEGw=s0-d-e1-ft#https://mcusercontent.com/bfbd29faaf4c5a50d776a6c40/images/e0a8a7ac-9b70-4481-a0ab-dd55419adff4.png\"\r\n\r\ninterface MovieItem {\r\n  id: string;\r\n  name: string;\r\n  summary: string;\r\n  image: any;\r\n}\r\n\r\ninterface Props {\r\n  movies: Array<MovieItem>;\r\n}\r\n\r\nconst MoviesPage: NextPage<Props> = ({ movies }) => {\r\n  const searchInput = useRef(null);\r\n  const [ moviesList, setMoviesList ] = useState(movies);\r\n\r\n  const onSearchMovies = async () => {\r\n    console.log(searchInput.current.input.value);\r\n    const res = await fetch(`https://api.tvmaze.com/search/shows?q=${searchInput.current.input.value}`);\r\n    const data = await res.json();\r\n    setMoviesList(data.map(entry => get('show', entry)));\r\n  }\r\n\r\n  const renderMovies = (): JSX.Element | Array<JSX.Element> => {\r\n    return moviesList\r\n      ? moviesList.map(movie => {\r\n        const movieSummary = _.replace(movie.summary, /<[/]?[pb]>/g, '');\r\n        return (\r\n          <Card\r\n            key={movie.id}\r\n            hoverable\r\n            style={{ width: 240 }}\r\n            cover={<img alt=\"example\" src={movie.image?.medium || DefaultImageUrl } />}\r\n          >\r\n            <Meta title={movie.name || 'No name given'} description={movieSummary || 'No summary info'} />\r\n          </Card>\r\n        )\r\n      }) \r\n      : <p>No Movies found</p>\r\n  }\r\n\r\n  return (\r\n    <LandingLayout path=\"home/movies\" title=\"Movies\" >\r\n      <p>Movies page</p>\r\n      <Input\r\n        ref={searchInput}\r\n        placeholder=\"Title movie name to search\"\r\n        onPressEnter={onSearchMovies}\r\n        style={{marginBottom: '24px'}} />\r\n      <div className=\"movies-list\">\r\n        { renderMovies() }\r\n      </div>\r\n    </LandingLayout>\r\n  )\r\n}\r\n\r\nMoviesPage.getInitialProps = async () => {\r\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=sherlock');\r\n  const data = await res.json();\r\n\r\n  return {\r\n    movies: data.map(entry => get('show', entry)),\r\n  }\r\n}\r\n\r\nexport default MoviesPage;"]},"metadata":{},"sourceType":"module"}